1. INTEGER LIMIT OUT OF BOUNDS

   -> FOR EXAMPLE: NEGATIVE INDEXING

2. ARRAY INDEX OUT OF BOUNDS

3. DIVISION BY ZERO

4. MEMSET BIG SIZE ARRAY IN EVERY TEST CASE

5. INFINITE LOOP

   -> FOR EXAMPLE: USE BINARY SEARCH ON FLOAT TYPE
   -> FORGET TO UPDATE LOOP CONTROLLER

7. BIG SIZE ARRAY DECLARATION INSIDE MAIN FUNCTION

8. DELETE ARRAY ELEMENT WHILE IN A LOOP RUNNING ON THE ARRAY

9. DON'T UPDATE ARRAY ELEMENT WITHOUT PROPER MEMORY ADDRESSING
   
   -> FOR EXAMPLE: for (auto i : array) i++; IT SHOULD BE: for (auto &i : array) i++;

10. FORGET TO RESET THE ARRAY

11. FOR BIG SIZE USE DYNAMIC VECTOR IN C++

12. x&(1<<b)==0 IS WRONG, WRITE ( x&(1<<b) )==0

13. FOR BIG STRING

	std::cin >> s; IS BETTER THAN scanf("%s",s);
	BUT, AGAIN std::cin>>s IS SLOW WITHOUT ios_base

14. ALWAYS DO THIS, ( a % M + M ) % M

	AS, NEGATIVE RES COULD OCCUR

15. TL ISSUE: USE BFS INSTEAD OF DFS, RANGE Q WITH NO UPD: BETTER SPARSE TABLE THAN SEGMENT TREE

16. FIRST DEFINE THE ALGO, THEN IMPLEMENT

17. REDUCE AS MUCH FLOAR OPERATION AS POSSIBLE

	* DON'T DO a/b > c, INSTEAD DO a > b*c

18. vec.erase(vec.begin()) -> CAN CAUSE TLE ISSUE

19. cin/cout WITH FASTIO IS FASTER THAN scanf/printf  // FROM EXPERIENCE

20. map OR unordered_map

21. ALWAYS DO PRECALCULATIONS ONCE, USE GLOBAL "DONE" VARIABLE